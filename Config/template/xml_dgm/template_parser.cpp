//this file is generated by codedump at ${META_DATETIME} do NOT edit it !

#include "${META_FILE_NAME}.h"
#include <platform/platform_shared/uio/convert/convert_interface.h>


bool ${META_NAME}Parser::Init(const char* xmlfile)
{
    Attach(xmlfile);
    return ReLoadConfig();
}

bool ${META_NAME}Parser::LoadConfig(variant* root)
{
    return Parse${META_ROOT_CLASS_NAME}(root, m_config);
}

@{BEGIN_CLASS}
bool ${META_NAME}Parser::Parse${CLASS_NAME}(variant* root, ${CLASS_NAME}& info)
{
@{BEGIN_FIELD_TYPE_CLASS}
    {
        variant* v_class = v->get_child("${CLASS_FIELD_TAG}");
        if(v_class &&
        @{IF(${CLASS_FIELD_ATTR_NAME}==reward)}
        !G_Read_RewardInfo(v_class, info.${CLASS_FIELD_NAME}))
        @{ELSE}
        !Parse${CLASS_FIELD_TYPE}(v_class, info.${CLASS_FIELD_NAME}))
        @{END_IF}
        {
            return false;
        }
    }
@{END_FIELD_TYPE_CLASS}
@{BEGIN_FIELD_TYPE_DICT}
    {
        variant* v_dict = root->get_child("${CLASS_FIELD_TAG}");
        if(v_dict == NULL)
        {
            v_dict = root;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "${DICT_VALUE_TAG}"))
            {
                ${DICT_VALUE_TYPE} element;
                variant* v_element = v_dict->get_child(i);
                if(!Parse${DICT_VALUE_TYPE}(v_element, element))
                {
                    return false;
                }
                info.${CLASS_FIELD_NAME}.insert(std::make_pair(element.${CLASS_FIELD_KEY}, element));
            }
        }
    }
@{END_FIELD_TYPE_DICT}
@{BEGIN_FIELD_TYPE_LIST}
    {
        variant* v_list = v->get_child("${CLASS_FIELD_TAG}");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "${LIST_VALUE_TAG}"))
            {
                ${LIST_VALUE_TYPE} element;
                variant* v_element = v_list->get_child(i);
                if(!Parse${LIST_VALUE_TYPE}(v_element, element))
                {
                    return false;
                }
                info.${CLASS_FIELD_NAME}.push_back(element);
            }
        }
    }
@{END_FIELD_TYPE_LIST}
@{BEGIN_FIELD_TYPE_LIST_BASIC}
    {
        variant* v_list = v->get_child("${CLASS_FIELD_TAG}");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            ${LIST_VALUE_TYPE} element;
            if(from_str_variant(v_list->get_child(i), element)<0)
            {
                return false;
            }
            info.${CLASS_FIELD_NAME}.push_back(element);
        }
    }
@{END_FIELD_TYPE_LIST_BASIC}
@{BEGIN_FIELD_TYPE_ENUM}
    {
        int e=0;
@{IF0(${CLASS_FIELD_IS_OPTIONAL})}
        from_str_variant(v->get_child("${CLASS_FIELD_TAG}"), e);
@{ELSE}
        if(from_str_variant(v->get_child("${CLASS_FIELD_TAG}"), e)<0) {return false;}
@{END_IF}
        info.${CLASS_FIELD_NAME}=(${CLASS_FIELD_TYPE})e;
    }
@{END_FIELD_TYPE_ENUM}
@{BEGIN_FIELD_TYPE_BASIC}
@{IF(${CLASS_FIELD_IS_OPTIONAL})}
    from_str_variant(v->get_child("${CLASS_FIELD_TAG}"), info.${CLASS_FIELD_NAME});
@{ELSE}
    if(from_str_variant(v->get_child("${CLASS_FIELD_TAG}"), info.${CLASS_FIELD_NAME})<0) {return false;}
@{END_IF}
@{END_FIELD_TYPE_BASIC}

    return true;
}

@{END_CLASS}


