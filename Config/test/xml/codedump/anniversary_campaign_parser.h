//this file is generated by codedump tool at 2/12/2019 15:07:58 do NOT edit it !

#ifndef __AnniversaryCampaign__PARSER_H__
#define __AnniversaryCampaign__PARSER_H__
#include <map>
#include <vector>
#include <string>
#include <platform/platform_shared/dynamic_config.h>



struct RewardInfo
{
    int type; 
    int boy_id; 
    int girl_id; 
    int num; 
};


struct SeatNeed
{
    RewardInfo need; 
};


struct AnnyMisc
{
    int campaign_id; 
    int carnival_activity; 
};


struct SeatMisc
{
    int seat_a_id; 
    int seat_b_id; 
    int seat_c_id; 
};


struct SeatUpgrade
{
    int seat_id; 
    int next_seat_id; 
    SeatNeed need; 
};


struct Seat
{
    SeatMisc misc; 
    std::vector<SeatUpgrade> upgrade; 
};


struct Day
{
    int dayid; 
    RewardInfo reward; 
};


struct AnniversaryConfig
{
    AnnyMisc misc; 
    Seat seat; 
    std::map<int,Day> signin_cfg; 
};


class AnniversaryCampaignParser: public CDynamicConfig
{
public:
    bool Init(const char* xmlfile);
    virtual bool LoadConfig(variant* root);
    const AnniversaryConfig& GetConfig(){return m_config;}
private:
    bool ParseRewardInfo(variant* root, RewardInfo& info);
    bool ParseSeatNeed(variant* root, SeatNeed& info);
    bool ParseAnnyMisc(variant* root, AnnyMisc& info);
    bool ParseSeatMisc(variant* root, SeatMisc& info);
    bool ParseSeatUpgrade(variant* root, SeatUpgrade& info);
    bool ParseSeat(variant* root, Seat& info);
    bool ParseDay(variant* root, Day& info);
    bool ParseAnniversaryConfig(variant* root, AnniversaryConfig& info);
private:
    AnniversaryConfig m_config;
};

#endif //__AnniversaryCampaign__PARSER_H__
