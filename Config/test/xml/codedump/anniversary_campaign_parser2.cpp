//this file is generated by codedump at 1/16/2019 13:09:24 do NOT edit it !

#include "anniversary_campaign_parser2.h"
#include <platform/platform_shared/uio/convert/convert_interface.h>


bool AnniversaryCampaignParser::Init(const char* xmlfile)
{
    Attach(xmlfile);
    return ReLoadConfig();
}

bool AnniversaryCampaignParser::LoadConfig(variant* root)
{
    return ParseAnniversaryConfig(root, m_config);
}

bool AnniversaryCampaignParser::ParseRewardInfo(variant* root, RewardInfo& info)
{
    if(from_str_variant(v->get_child("type"), info.type)<0) {return false;}
    if(from_str_variant(v->get_child("boy_id"), info.boy_id)<0) {return false;}
    if(from_str_variant(v->get_child("girl_id"), info.girl_id)<0) {return false;}
    if(from_str_variant(v->get_child("num"), info.num)<0) {return false;}

    return true;
}

bool AnniversaryCampaignParser::ParseSeatNeed(variant* root, SeatNeed& info)
{
    {
        variant* v_class = v->get_child("need");
        if(v_class &&
        !G_Read_RewardInfo(v_class, info.need))
        {
            return false;
        }
    }

    return true;
}

bool AnniversaryCampaignParser::ParseAnnyMisc(variant* root, AnnyMisc& info)
{
    if(from_str_variant(v->get_child("campaign_id"), info.campaign_id)<0) {return false;}
    if(from_str_variant(v->get_child("carnival_activity"), info.carnival_activity)<0) {return false;}

    return true;
}

bool AnniversaryCampaignParser::ParseSeatMisc(variant* root, SeatMisc& info)
{
    if(from_str_variant(v->get_child("seat_a_id"), info.seat_a_id)<0) {return false;}
    if(from_str_variant(v->get_child("seat_b_id"), info.seat_b_id)<0) {return false;}
    if(from_str_variant(v->get_child("seat_c_id"), info.seat_c_id)<0) {return false;}

    return true;
}

bool AnniversaryCampaignParser::ParseSeatUpgrade(variant* root, SeatUpgrade& info)
{
    if(from_str_variant(v->get_child("seat_id"), info.seat_id)<0) {return false;}
    if(from_str_variant(v->get_child("next_seat_id"), info.next_seat_id)<0) {return false;}
    {
        variant* v_class = v->get_child("need");
        if(v_class &&
        !ParseSeatNeed(v_class, info.need))
        {
            return false;
        }
    }

    return true;
}

bool AnniversaryCampaignParser::ParseSeat(variant* root, Seat& info)
{
    {
        variant* v_class = v->get_child("Misc");
        if(v_class &&
        !ParseSeatMisc(v_class, info.misc))
        {
            return false;
        }
    }
    {
        variant* v_list = v->get_child("Upgrades");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "SeatUpgrade"))
            {
                SeatUpgrade element;
                variant* v_element = v_list->get_child(i);
                if(!ParseSeatUpgrade(v_element, element))
                {
                    return false;
                }
                info.upgrade.push_back(element);
            }
        }
    }

    return true;
}

bool AnniversaryCampaignParser::ParseDay(variant* root, Day& info)
{
    if(from_str_variant(v->get_child("dayid"), info.dayid)<0) {return false;}
    {
        variant* v_class = v->get_child("reward");
        if(v_class &&
        !G_Read_RewardInfo(v_class, info.reward))
        {
            return false;
        }
    }

    return true;
}

bool AnniversaryCampaignParser::ParseAnniversaryConfig(variant* root, AnniversaryConfig& info)
{
    {
        variant* v_class = v->get_child("Misc");
        if(v_class &&
        !ParseAnnyMisc(v_class, info.misc))
        {
            return false;
        }
    }
    {
        variant* v_class = v->get_child("seat");
        if(v_class &&
        !ParseSeat(v_class, info.seat))
        {
            return false;
        }
    }
    {
        variant* v_dict = root->get_child("Signin");
        if(v_dict == NULL)
        {
            v_dict = root;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "Day"))
            {
                Day element;
                variant* v_element = v_dict->get_child(i);
                if(!ParseDay(v_element, element))
                {
                    return false;
                }
                info.signin_cfg.insert(std::make_pair(element.dayid, element));
            }
        }
    }

    return true;
}



