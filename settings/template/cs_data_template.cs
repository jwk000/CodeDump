//this file is generated by xml2code tool ${DATETIME}
//DO NOT EDIT IT !

using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{
@{BEGIN_ENUM}
    ${ENUM_COMMENT}
    public enum ${ENUM_NAME}
    {
        @{BEGIN_ENUM_FIELD}
        ${ENUM_FIELD_NAME} = ${ENUM_FIELD_VALUE}, ${ENUM_FIELD_COMMENT}
        @{END_ENUM_FIELD}
    }
@{END_ENUM}

@{BEGIN_CLASS}
    ${CLASS_COMMENT}
    public class ${CLASS_NAME} :IXmlParser
    {
        @{BEGIN_CLASS_FIELD}
        public ${CLASS_FIELD_TYPE} ${CLASS_FIELD_NAME} ${CLASS_FIELD_DEFAULT_VALUE}; ${CLASS_FIELD_COMMENT}
        @{END_CLASS_FIELD}

        public bool Parse(XmlNode node)
        {
            @{BEGIN_FIELD_TYPE_DICT}
            {
                var mid_node = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var nodes = mid_node.SelectNodes("${DICT_VALUE_TYPE}");
                if(nodes!=null)
                {
                    foreach(XmlNode n in nodes)
                    {
                        ${DICT_VALUE_TYPE} value = new ${DICT_VALUE_TYPE}();
                        if(!value.Parse(n))
                        {
                            return false;
                        }
                        ${CLASS_FIELD_NAME}.Add(value.${CLASS_FIELD_KEY}, value);
                    }
                }
            }
            @{END_FIELD_TYPE_DICT}
            @{BEGIN_FIELD_TYPE_LIST}
            {
                var mid_node = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("${LIST_VALUE_TYPE}");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    ${LIST_VALUE_TYPE} value = new ${LIST_VALUE_TYPE}();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    ${CLASS_FIELD_NAME}.Add(value);
                }
            }
            @{END_FIELD_TYPE_LIST}
            @{BEGIN_FIELD_TYPE_LIST_BASIC}
            {
                var mid_node = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node =  mid_node.ChildNodes;
                if(child_node != null)
                {
                    foreach(XmlNode n in child_node)
                    {
                    @{BEGIN_CLASS_FIELD_IF(EQ,"${LIST_VALUE_TYPE}","string")}
                        ${CLASS_FIELD_NAME}.Add(n.InnerText);
                    @{BEGIN_CLASS_FIELD_ELSE}
                        ${CLASS_FIELD_NAME}.Add(${LIST_VALUE_TYPE}.Parse(n.InnerText));
                    @{END_CLASS_FIELD_IF}
                    }
                }
            }
            @{END_FIELD_TYPE_LIST_BASIC}
            @{BEGIN_FIELD_TYPE_CLASS}
            {
                var child_node = node.SelectSingleNode("${CLASS_FIELD_TYPE}");
                if(child_node != null)
                {
                    if(!${CLASS_FIELD_NAME}.Parse(child_node))
                    {
                        return false;
                    }
                }
            }
            @{END_FIELD_TYPE_CLASS}
            @{BEGIN_FIELD_TYPE_LIST_STRING}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                var s = node.Attributes["${CLASS_FIELD_NAME}"].Value;
                ${CLASS_FIELD_NAME} = GenericStringParser.GetObjectList<${LIST_VALUE_TYPE}>(s);
            }
            @{END_FIELD_TYPE_LIST_STRING}
            @{BEGIN_FIELD_TYPE_CLASS_STRING}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                var s = node.Attributes["${CLASS_FIELD_NAME}"].Value;
                ${CLASS_FIELD_NAME} = GenericStringParser.GetObject<${CLASS_FIELD_TYPE}>(s);
            }
            @{END_FIELD_TYPE_CLASS_STRING}
            @{BEGIN_FIELD_TYPE_STRING}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                ${CLASS_FIELD_NAME} = node.Attributes["${CLASS_FIELD_NAME}"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(child!=null)
                {
                    ${CLASS_FIELD_NAME} = child.InnerText;
                }
            }
            @{END_FIELD_TYPE_STRING}
            @{BEGIN_FIELD_TYPE_ENUM}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                ${CLASS_FIELD_NAME} = (${CLASS_FIELD_TYPE})int.Parse(node.Attributes["${CLASS_FIELD_NAME}"].Value);
            }
            @{END_FIELD_TYPE_ENUM}
            @{BEGIN_FIELD_TYPE_INT}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                ${CLASS_FIELD_NAME} = int.Parse(node.Attributes["${CLASS_FIELD_NAME}"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(child!=null)
                {
                    ${CLASS_FIELD_NAME} = int.Parse(child.InnerText);
                }
            }
            @{END_FIELD_TYPE_INT}
            @{BEGIN_FIELD_TYPE_FLOAT}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                ${CLASS_FIELD_NAME} = float.Parse(node.Attributes["${CLASS_FIELD_NAME}"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(child!=null)
                {
                    ${CLASS_FIELD_NAME} = float.Parse(child.InnerText);
                }
            }
            @{END_FIELD_TYPE_FLOAT}
            @{BEGIN_FIELD_TYPE_BOOL}
            if(node.Attributes!=null && node.Attributes["${CLASS_FIELD_NAME}"]!=null)
            {
                ${CLASS_FIELD_NAME} = bool.Parse(node.Attributes["${CLASS_FIELD_NAME}"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("${CLASS_FIELD_NAME}");
                if(child!=null)
                {
                    ${CLASS_FIELD_NAME} = bool.Parse(child.InnerText);
                }
            }
            @{END_FIELD_TYPE_BOOL}

            return true;
        }
    }

@{END_CLASS}

    public class Test${META_NAME} : ITestCode
    {
        public void RunTestCode(string basepath)
        {
            string xml = basepath+"${META_FILE_PATH}.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xml);
            XmlNode root = doc.LastChild;
            ${ROOT_CLASS_NAME} data = new ${ROOT_CLASS_NAME}();
            if(!data.Parse(root))
            {
                Console.WriteLine("解析{0}失败", xml);
                return;
            }

            //写入bytes文件
            byte[] b = GenericBuilder.GenericsEncode(data);
            FileStream fs = File.Create("${META_NAME}.bytes");
            fs.Write(b, 0, b.Length);
            fs.Close();

            //dump内容
            ${ROOT_CLASS_NAME} d = GenericParser.GenericsDecode<${ROOT_CLASS_NAME}>(b);
            string s = GenericDump.Dump(d);
            fs = File.Create("${META_NAME}.txt");
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine(s);
            sw.Close();
            fs.Close();
        }
    }
}