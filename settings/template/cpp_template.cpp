//this file is generated by xml2code tool at ${DATETIME}
//do NOT edit it !

#include "${META_NAME}.h"
#include <sstream>

@{BEGIN_CLASS}
bool ${CLASS_NAME}::LoadFromString(std::string s)
{
@{BEGIN_CLASS_IF(EQ,"${CLASS_ATTR_NAME}","string")}
    char _delimiter;
    std::stringstream ss(s);
    ss
    @{BEGIN_CLASS_FIELD}
    >> ${CLASS_FIELD_NAME} >> _delimiter
    @{END_CLASS_FIELD}
    ;
    return true;
@{BEGIN_CLASS_ELSE}
    return false;
@{END_CLASS_IF}
}
@{END_CLASS}

@{BEGIN_CLASS}
bool ${CLASS_NAME}::LoadFromVariant(variant* v)
{
@{BEGIN_FIELD_TYPE_DICT}
    {
        variant* v_dict = v->get_child("${CLASS_FIELD_NAME}");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "${DICT_VALUE_TYPE}"))
            {
                ${DICT_VALUE_TYPE} element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                ${CLASS_FIELD_NAME}.emplace(element.${CLASS_FIELD_KEY}, element);
            }
        }
    }
@{END_FIELD_TYPE_DICT}
@{BEGIN_FIELD_TYPE_LIST}
    {
        variant* v_list = v->get_child("${CLASS_FIELD_NAME}");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "${LIST_VALUE_TYPE}"))
            {
                ${LIST_VALUE_TYPE} element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                ${CLASS_FIELD_NAME}.emplace_back(element);
            }
        }
    }
@{END_FIELD_TYPE_LIST}
@{BEGIN_FIELD_TYPE_LIST_BASIC}
    {
        variant* v_list = v->get_child("${CLASS_FIELD_NAME}");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            ${LIST_VALUE_TYPE} element;
            if(from_str_variant(v_list->get_child(i), element)<0)
            {
                return false;
            }
            ${CLASS_FIELD_NAME}.emplace_back(element);
        }
    }
@{END_FIELD_TYPE_LIST_BASIC}
@{BEGIN_FIELD_TYPE_LIST_STRING}
    {
        std::string s;
        if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), s)<0) return false;
        ClassStringReader cr;
        ${CLASS_FIELD_NAME} = cr.GetObjectList<${LIST_VALUE_TYPE}>();
    }
@{END_FIELD_TYPE_LIST_STRING}
@{BEGIN_FIELD_TYPE_CLASS}
    {
        variant* v_class = v->get_child("${CLASS_FIELD_NAME}");
        if(!${CLASS_FIELD_NAME}.LoadFromVariant(v_class))
        {
            return false;
        }
    }
@{END_FIELD_TYPE_CLASS}
@{BEGIN_FIELD_TYPE_ENUM}
    if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), ${CLASS_FIELD_NAME})<0) return false;
@{END_FIELD_TYPE_ENUM}
@{BEGIN_FIELD_TYPE_CLASS_STRING}
    {
        std::string s;
        if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), s)<0) return false;
        if(!${CLASS_FIELD_NAME}.LoadFromString(s))
        {
            return false;
        }
    }
@{END_FIELD_TYPE_CLASS_STRING}
@{BEGIN_FIELD_TYPE_STRING}
    if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), ${CLASS_FIELD_NAME})<0) return false;
@{END_FIELD_TYPE_STRING}
@{BEGIN_FIELD_TYPE_INT}
    if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), ${CLASS_FIELD_NAME})<0) return false;
@{END_FIELD_TYPE_INT}
@{BEGIN_FIELD_TYPE_FLOAT}
    if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), ${CLASS_FIELD_NAME})<0) return false;
@{END_FIELD_TYPE_FLOAT}
@{BEGIN_FIELD_TYPE_BOOL}
    if(from_str_variant(v->get_child("${CLASS_FIELD_NAME}"), ${CLASS_FIELD_NAME})<0) return false;
@{END_FIELD_TYPE_BOOL}

    return true;
}
@{END_CLASS}

