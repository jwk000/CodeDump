//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "simulation_table.h"
#include <sstream>

bool Upgrade::LoadFromString(std::string s)
{
    return false;
}
bool Furniture::LoadFromString(std::string s)
{
    return false;
}
bool Action::LoadFromString(std::string s)
{
    return false;
}
bool ReduceMap::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> key >> _delimiter
    >> value >> _delimiter
    ;
    return true;
}
bool Const::LoadFromString(std::string s)
{
    return false;
}
bool Simulation::LoadFromString(std::string s)
{
    return false;
}

bool Upgrade::LoadFromVariant(variant* v)
{
    {
        std::string s;
        if(from_str_variant(v->get_child("cost"), s)<0) return false;
        ClassStringReader cr;
        cost = cr.GetObjectList<CostItem>();
    }
    if(from_str_variant(v->get_child("level"), level)<0) return false;
    if(from_str_variant(v->get_child("player_level"), player_level)<0) return false;
    if(from_str_variant(v->get_child("pos_count"), pos_count)<0) return false;
    if(from_str_variant(v->get_child("out_interval"), out_interval)<0) return false;
    if(from_str_variant(v->get_child("out_level_rate"), out_level_rate)<0) return false;

    return true;
}
bool Furniture::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("LevelList");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "Upgrade"))
            {
                Upgrade element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                LevelList.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("furniture_id"), furniture_id)<0) return false;
    if(from_str_variant(v->get_child("is_double"), is_double)<0) return false;

    return true;
}
bool Action::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("FurnitureList");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "Furniture"))
            {
                Furniture element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                FurnitureList.emplace_back(element);
            }
        }
    }
    {
        std::string s;
        if(from_str_variant(v->get_child("outreward"), s)<0) return false;
        if(!outreward.LoadFromString(s))
        {
            return false;
        }
    }
    if(from_str_variant(v->get_child("name"), name)<0) return false;
    if(from_str_variant(v->get_child("anim_id"), anim_id)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("out_action_rate"), out_action_rate)<0) return false;

    return true;
}
bool ReduceMap::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("key"), key)<0) return false;
    if(from_str_variant(v->get_child("value"), value)<0) return false;

    return true;
}
bool Const::LoadFromVariant(variant* v)
{
    {
        std::string s;
        if(from_str_variant(v->get_child("recover_time_reduce_map"), s)<0) return false;
        ClassStringReader cr;
        recover_time_reduce_map = cr.GetObjectList<ReduceMap>();
    }
    if(from_str_variant(v->get_child("health_phase_img"), health_phase_img)<0) return false;
    if(from_str_variant(v->get_child("normal_phase_img"), normal_phase_img)<0) return false;
    if(from_str_variant(v->get_child("tired_phase_img"), tired_phase_img)<0) return false;
    if(from_str_variant(v->get_child("out_heart_time"), out_heart_time)<0) return false;
    if(from_str_variant(v->get_child("storage_max_count"), storage_max_count)<0) return false;
    if(from_str_variant(v->get_child("recover_health_time"), recover_health_time)<0) return false;
    if(from_str_variant(v->get_child("health_out_rate"), health_out_rate)<0) return false;
    if(from_str_variant(v->get_child("normal_out_rate"), normal_out_rate)<0) return false;
    if(from_str_variant(v->get_child("tired_out_rate"), tired_out_rate)<0) return false;
    if(from_str_variant(v->get_child("recover_heart_time"), recover_heart_time)<0) return false;
    if(from_str_variant(v->get_child("min_work_time"), min_work_time)<0) return false;
    if(from_str_variant(v->get_child("max_work_time"), max_work_time)<0) return false;
    if(from_str_variant(v->get_child("health_phase_rate"), health_phase_rate)<0) return false;
    if(from_str_variant(v->get_child("normal_phase_rate"), normal_phase_rate)<0) return false;
    if(from_str_variant(v->get_child("tired_phase_rate"), tired_phase_rate)<0) return false;

    return true;
}
bool Simulation::LoadFromVariant(variant* v)
{
    {
        variant* v_dict = v->get_child("ActionList");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "Action"))
            {
                Action element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                ActionList.emplace(element.id, element);
            }
        }
    }
    {
        variant* v_class = v->get_child("const_var");
        if(!const_var.LoadFromVariant(v_class))
        {
            return false;
        }
    }

    return true;
}

