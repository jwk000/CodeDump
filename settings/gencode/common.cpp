//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "common.h"
#include <sstream>

bool CostItem::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> type >> _delimiter
    >> id >> _delimiter
    >> count >> _delimiter
    ;
    return true;
}
bool Reward::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> type >> _delimiter
    >> id >> _delimiter
    >> count >> _delimiter
    ;
    return true;
}
bool ObjectLayout::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> id >> _delimiter
    >> x >> _delimiter
    >> y >> _delimiter
    >> angle >> _delimiter
    ;
    return true;
}
bool bodyPart::LoadFromString(std::string s)
{
    return false;
}
bool Pos::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> x >> _delimiter
    >> y >> _delimiter
    ;
    return true;
}
bool Size::LoadFromString(std::string s)
{
    char _delimiter;
    std::stringstream ss(s);
    ss
    >> w >> _delimiter
    >> h >> _delimiter
    ;
    return true;
}

bool CostItem::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("count"), count)<0) return false;

    return true;
}
bool Reward::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("count"), count)<0) return false;

    return true;
}
bool ObjectLayout::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("x"), x)<0) return false;
    if(from_str_variant(v->get_child("y"), y)<0) return false;
    if(from_str_variant(v->get_child("angle"), angle)<0) return false;

    return true;
}
bool bodyPart::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("src"), src)<0) return false;

    return true;
}
bool Pos::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("x"), x)<0) return false;
    if(from_str_variant(v->get_child("y"), y)<0) return false;

    return true;
}
bool Size::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("w"), w)<0) return false;
    if(from_str_variant(v->get_child("h"), h)<0) return false;

    return true;
}

