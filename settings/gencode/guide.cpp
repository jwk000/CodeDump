//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "guide.h"
#include <sstream>

bool lockui::LoadFromString(std::string s)
{
    return false;
}
bool maskinfo::LoadFromString(std::string s)
{
    return false;
}
bool action::LoadFromString(std::string s)
{
    return false;
}
bool condition::LoadFromString(std::string s)
{
    return false;
}
bool Step::LoadFromString(std::string s)
{
    return false;
}
bool Group::LoadFromString(std::string s)
{
    return false;
}
bool flower::LoadFromString(std::string s)
{
    return false;
}
bool item::LoadFromString(std::string s)
{
    return false;
}
bool res::LoadFromString(std::string s)
{
    return false;
}
bool other_guide_config::LoadFromString(std::string s)
{
    return false;
}
bool Groups::LoadFromString(std::string s)
{
    return false;
}

bool lockui::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("locktime"), locktime)<0) return false;

    return true;
}
bool maskinfo::LoadFromVariant(variant* v)
{
    {
        variant* v_class = v->get_child("maskPos");
        if(!maskPos.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    {
        variant* v_class = v->get_child("masksize");
        if(!masksize.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    {
        variant* v_class = v->get_child("windowpos");
        if(!windowpos.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    if(from_str_variant(v->get_child("anchorType"), anchorType)<0) return false;
    if(from_str_variant(v->get_child("winShowType"), winShowType)<0) return false;
    if(from_str_variant(v->get_child("rotz"), rotz)<0) return false;
    if(from_str_variant(v->get_child("isMaskTransparent"), isMaskTransparent)<0) return false;

    return true;
}
bool action::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("param1"), param1)<0) return false;
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("npc"), npc)<0) return false;
    if(from_str_variant(v->get_child("delay"), delay)<0) return false;

    return true;
}
bool condition::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("param1"), param1)<0) return false;
    if(from_str_variant(v->get_child("type"), type)<0) return false;

    return true;
}
bool Step::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("comm_actions");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "action"))
            {
                action element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                comm_actions.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("finish_conditions");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "condition"))
            {
                condition element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                finish_conditions.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("trigger_conditions");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "condition"))
            {
                condition element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                trigger_conditions.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("pop_tip_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            std::string element;
            if(from_str_variant(v_list->get_child(i), element)<0)
            {
                return false;
            }
            pop_tip_list.emplace_back(element);
        }
    }
    {
        variant* v_class = v->get_child("lockuiv");
        if(!lockuiv.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    {
        variant* v_class = v->get_child("maskinfov");
        if(!maskinfov.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    if(from_str_variant(v->get_child("padView"), padView)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("backto"), backto)<0) return false;
    if(from_str_variant(v->get_child("isLocalStep"), isLocalStep)<0) return false;

    return true;
}
bool Group::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("steps");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "Step"))
            {
                Step element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                steps.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("groupid"), groupid)<0) return false;
    if(from_str_variant(v->get_child("guidetype"), guidetype)<0) return false;

    return true;
}
bool flower::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("num"), num)<0) return false;
    if(from_str_variant(v->get_child("type"), type)<0) return false;

    return true;
}
bool item::LoadFromVariant(variant* v)
{
    {
        variant* v_class = v->get_child("pos");
        if(!pos.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    {
        variant* v_class = v->get_child("xiaoyao_pos");
        if(!xiaoyao_pos.LoadFromVariant(v_class))
        {
            return false;
        }
    }
    if(from_str_variant(v->get_child("type_id"), type_id)<0) return false;

    return true;
}
bool res::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("picture"), picture)<0) return false;

    return true;
}
bool other_guide_config::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("garden_synthetic_flower_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "flower"))
            {
                flower element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                garden_synthetic_flower_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("collection_position_config");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "item"))
            {
                item element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                collection_position_config.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("happy_match_res");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "res"))
            {
                res element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                happy_match_res.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("arena2v2_match_res");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "res"))
            {
                res element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                arena2v2_match_res.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("happy_match_title_res"), happy_match_title_res)<0) return false;
    if(from_str_variant(v->get_child("arena2v2_match_title_res"), arena2v2_match_title_res)<0) return false;
    if(from_str_variant(v->get_child("garden_guide_seed_id"), garden_guide_seed_id)<0) return false;
    if(from_str_variant(v->get_child("garden_per_seed_harvest_num"), garden_per_seed_harvest_num)<0) return false;
    if(from_str_variant(v->get_child("garden_synthetic_flower_per_need"), garden_synthetic_flower_per_need)<0) return false;
    if(from_str_variant(v->get_child("forge_product_id_boy"), forge_product_id_boy)<0) return false;
    if(from_str_variant(v->get_child("forge_product_id_girl"), forge_product_id_girl)<0) return false;

    return true;
}
bool Groups::LoadFromVariant(variant* v)
{
    {
        variant* v_dict = v->get_child("groups");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "Group"))
            {
                Group element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                groups.emplace(element.groupid, element);
            }
        }
    }
    {
        variant* v_class = v->get_child("other_cfg");
        if(!other_cfg.LoadFromVariant(v_class))
        {
            return false;
        }
    }

    return true;
}

