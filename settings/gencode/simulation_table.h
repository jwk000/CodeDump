//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#pragma once
#include <map>
#include <vector>
#include <string>
#include "../shared/xml_config_interface.h"
#include "common.h"

//enum

//class

struct Upgrade : public IXmlParser
{
    int level; 
    int player_level; 
    std::vector<CostItem> cost; 
    int pos_count; 
    int out_interval; 
    float out_level_rate; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

struct Furniture : public IXmlParser
{
    int furniture_id; 
    bool is_double; 
    std::vector<Upgrade> LevelList; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

struct Action : public IXmlParser
{
    int id; 
    std::string name; 
    Reward outreward; 
    std::string anim_id; 
    float out_action_rate; 
    std::vector<Furniture> FurnitureList; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

struct ReduceMap : public IXmlParser
{
    int key; 
    float value; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

struct Const : public IXmlParser
{
    int out_heart_time; 
    int storage_max_count; 
    int recover_health_time; 
    int health_out_rate; 
    int normal_out_rate; 
    int tired_out_rate; 
    int recover_heart_time; 
    int min_work_time; 
    int max_work_time; 
    int health_phase_rate; 
    int normal_phase_rate; 
    int tired_phase_rate; 
    std::string health_phase_img; 
    std::string normal_phase_img; 
    std::string tired_phase_img; 
    std::vector<ReduceMap> recover_time_reduce_map; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

struct Simulation : public IXmlParser
{
    Const const_var; 
    std::map<int,Action> ActionList; 
    bool LoadFromString(std::string s);
    bool LoadFromVariant(variant* v);
};

//hotfix
class simulation_table_hotfix_xml:public IHotfixXml
{
public:
    virtual bool Load(variant* v);
    virtual void* Root(){return root;}
private:
    Simulation* root;
};
