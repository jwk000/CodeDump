//this file is generated by xml2code tool 7/18/2018 19:28:28
//DO NOT EDIT IT !

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{

    
    public class Upgrade :IXmlParser
    {
        public int level = ; 
        public int player_level = ; 
        public List<CostItem> cost = new List<CostItem>(); 
        public int pos_count = ; 
        public int out_interval = ; 
        public int out_level_rate = ; 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("cost");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("CostItem");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    CostItem value = new CostItem();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    cost.Add(value);
                }
            }
            if(node.Attributes!=null && node.Attributes["level"]!=null)
            {
                level = int.Parse(node.Attributes["level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("level");
                if(child!=null)
                {
                    level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["player_level"]!=null)
            {
                player_level = int.Parse(node.Attributes["player_level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("player_level");
                if(child!=null)
                {
                    player_level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["pos_count"]!=null)
            {
                pos_count = int.Parse(node.Attributes["pos_count"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("pos_count");
                if(child!=null)
                {
                    pos_count = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_interval"]!=null)
            {
                out_interval = int.Parse(node.Attributes["out_interval"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_interval");
                if(child!=null)
                {
                    out_interval = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_level_rate"]!=null)
            {
                out_level_rate = int.Parse(node.Attributes["out_level_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_level_rate");
                if(child!=null)
                {
                    out_level_rate = int.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Furniture :IXmlParser
    {
        public int furniture_id = ; 
        public  is_double = ; 
        public List<Upgrade> LevelList = new List<Upgrade>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("LevelList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("Upgrade");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    Upgrade value = new Upgrade();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    LevelList.Add(value);
                }
            }
            if(node.Attributes!=null && node.Attributes["furniture_id"]!=null)
            {
                furniture_id = int.Parse(node.Attributes["furniture_id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("furniture_id");
                if(child!=null)
                {
                    furniture_id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["is_double"]!=null)
            {
                is_double = bool.Parse(node.Attributes["is_double"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("is_double");
                if(child!=null)
                {
                    is_double = bool.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Action :IXmlParser
    {
        public int id = ; 
        public string name = ; 
        public Reward out = new Reward(); 
        public string anim_id = ; 
        public float out_action_rate = ; 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["out"]!=null)
            {
                var s = node.Attributes["out"].Value;
                out = GenericStringParser.GetObject<Reward>(s);
            }
            if(node.Attributes!=null && node.Attributes["name"]!=null)
            {
                name = node.Attributes["name"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("name");
                if(child!=null)
                {
                    name = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["anim_id"]!=null)
            {
                anim_id = node.Attributes["anim_id"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("anim_id");
                if(child!=null)
                {
                    anim_id = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["id"]!=null)
            {
                id = int.Parse(node.Attributes["id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("id");
                if(child!=null)
                {
                    id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_action_rate"]!=null)
            {
                out_action_rate = float.Parse(node.Attributes["out_action_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_action_rate");
                if(child!=null)
                {
                    out_action_rate = float.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class ActionList :IXmlParser
    {
        public Dictionary<int,Action> actionlist = new Dictionary<int,Action>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("actionlist");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var nodes = mid_node.SelectNodes("Action");
                if(nodes!=null)
                {
                    foreach(XmlNode n in nodes)
                    {
                        Action value = new Action();
                        if(!value.Parse(n))
                        {
                            return false;
                        }
                        actionlist.Add(value.id, value);
                    }
                }
            }

            return true;
        }
    }

}
