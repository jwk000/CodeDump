//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "cardrole.h"
#include <sstream>

bool score::LoadFromString(std::string s)
{
    return false;
}
bool level_up_material::LoadFromString(std::string s)
{
    return false;
}
bool material::LoadFromString(std::string s)
{
    return false;
}
bool star_up_material::LoadFromString(std::string s)
{
    return false;
}
bool ability::LoadFromString(std::string s)
{
    return false;
}
bool level_ability::LoadFromString(std::string s)
{
    return false;
}
bool level_skill::LoadFromString(std::string s)
{
    return false;
}
bool skin::LoadFromString(std::string s)
{
    return false;
}
bool info::LoadFromString(std::string s)
{
    return false;
}
bool story::LoadFromString(std::string s)
{
    return false;
}
bool information::LoadFromString(std::string s)
{
    return false;
}
bool cardrole::LoadFromString(std::string s)
{
    return false;
}
bool cardroleData::LoadFromString(std::string s)
{
    return false;
}

bool score::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("level"), level)<0) return false;
    if(from_str_variant(v->get_child("single"), single)<0) return false;
    if(from_str_variant(v->get_child("longscore"), longscore)<0) return false;
    if(from_str_variant(v->get_child("slide"), slide)<0) return false;

    return true;
}
bool level_up_material::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("level"), level)<0) return false;
    if(from_str_variant(v->get_child("gold"), gold)<0) return false;
    if(from_str_variant(v->get_child("fragment_num"), fragment_num)<0) return false;

    return true;
}
bool material::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("item_id"), item_id)<0) return false;
    if(from_str_variant(v->get_child("num"), num)<0) return false;

    return true;
}
bool star_up_material::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("material_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "material"))
            {
                material element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                material_list.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("star"), star)<0) return false;
    if(from_str_variant(v->get_child("gold"), gold)<0) return false;

    return true;
}
bool ability::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("val"), val)<0) return false;

    return true;
}
bool level_ability::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("abilitys");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "ability"))
            {
                ability element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                abilitys.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("favor_level"), favor_level)<0) return false;

    return true;
}
bool level_skill::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("star"), star)<0) return false;
    if(from_str_variant(v->get_child("skill_id"), skill_id)<0) return false;

    return true;
}
bool skin::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("index"), index)<0) return false;
    if(from_str_variant(v->get_child("skin_id"), skin_id)<0) return false;

    return true;
}
bool info::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("name"), name)<0) return false;
    if(from_str_variant(v->get_child("desc"), desc)<0) return false;
    if(from_str_variant(v->get_child("index"), index)<0) return false;

    return true;
}
bool story::LoadFromVariant(variant* v)
{
    if(from_str_variant(v->get_child("index"), index)<0) return false;
    if(from_str_variant(v->get_child("story_id"), story_id)<0) return false;

    return true;
}
bool information::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("info_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "info"))
            {
                info element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                info_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("story_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "story"))
            {
                story element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                story_list.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("name"), name)<0) return false;

    return true;
}
bool cardrole::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("level_score");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "score"))
            {
                score element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                level_score.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("level_up_material_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "level_up_material"))
            {
                level_up_material element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                level_up_material_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("star_up_material_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "star_up_material"))
            {
                star_up_material element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                star_up_material_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("ability_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "level_ability"))
            {
                level_ability element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                ability_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("skill_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "level_skill"))
            {
                level_skill element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                skill_list.emplace_back(element);
            }
        }
    }
    {
        variant* v_list = v->get_child("skin_list");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "skin"))
            {
                skin element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                skin_list.emplace_back(element);
            }
        }
    }
    if(from_str_variant(v->get_child("name"), name)<0) return false;
    if(from_str_variant(v->get_child("head_big_pic"), head_big_pic)<0) return false;
    if(from_str_variant(v->get_child("head_pic"), head_pic)<0) return false;
    if(from_str_variant(v->get_child("default_skin"), default_skin)<0) return false;
    if(from_str_variant(v->get_child("q_skin"), q_skin)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("sub_type"), sub_type)<0) return false;
    if(from_str_variant(v->get_child("rank"), rank)<0) return false;
    if(from_str_variant(v->get_child("default_star"), default_star)<0) return false;
    if(from_str_variant(v->get_child("fragment_id"), fragment_id)<0) return false;

    return true;
}
bool cardroleData::LoadFromVariant(variant* v)
{
    {
        variant* v_dict = v->get_child("cardrole_list");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "cardrole"))
            {
                cardrole element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                cardrole_list.emplace(element.id, element);
            }
        }
    }

    return true;
}

