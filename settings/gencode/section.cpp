//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "section.h"
#include <sstream>

bool section::LoadFromString(std::string s)
{
    return false;
}
bool SectionList::LoadFromString(std::string s)
{
    return false;
}

bool section::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("pre_sectionId");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            int element;
            if(from_str_variant(v_list->get_child(i), element)<0)
            {
                return false;
            }
            pre_sectionId.emplace_back(element);
        }
    }
    {
        std::string s;
        if(from_str_variant(v->get_child("position"), s)<0) return false;
        if(!position.LoadFromString(s))
        {
            return false;
        }
    }
    if(from_str_variant(v->get_child("name"), name)<0) return false;
    if(from_str_variant(v->get_child("describe"), describe)<0) return false;
    if(from_str_variant(v->get_child("force_main"), force_main)<0) return false;
    if(from_str_variant(v->get_child("invisible1"), invisible1)<0) return false;
    if(from_str_variant(v->get_child("invisible2"), invisible2)<0) return false;
    if(from_str_variant(v->get_child("buff"), buff)<0) return false;
    if(from_str_variant(v->get_child("normal_rewards"), normal_rewards)<0) return false;
    if(from_str_variant(v->get_child("first_rewards"), first_rewards)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("chapterId"), chapterId)<0) return false;
    if(from_str_variant(v->get_child("sceneId"), sceneId)<0) return false;
    if(from_str_variant(v->get_child("default_env_id"), default_env_id)<0) return false;
    if(from_str_variant(v->get_child("section_type"), section_type)<0) return false;
    if(from_str_variant(v->get_child("unlocklevel"), unlocklevel)<0) return false;
    if(from_str_variant(v->get_child("difficulty"), difficulty)<0) return false;
    if(from_str_variant(v->get_child("music_id"), music_id)<0) return false;
    if(from_str_variant(v->get_child("plot_id"), plot_id)<0) return false;
    if(from_str_variant(v->get_child("pre_plot_id"), pre_plot_id)<0) return false;
    if(from_str_variant(v->get_child("latter_plot_id"), latter_plot_id)<0) return false;

    return true;
}
bool SectionList::LoadFromVariant(variant* v)
{
    {
        variant* v_dict = v->get_child("section_list");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "section"))
            {
                section element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                section_list.emplace(element.id, element);
            }
        }
    }

    return true;
}

