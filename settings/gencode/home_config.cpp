//this file is generated by xml2code tool at 7/19/2018 17:04:32
//do NOT edit it !

#include "home_config.h"
#include <sstream>

bool SceneLevel::LoadFromString(std::string s)
{
    return false;
}
bool Scene::LoadFromString(std::string s)
{
    return false;
}
bool HomeConfig::LoadFromString(std::string s)
{
    return false;
}

bool SceneLevel::LoadFromVariant(variant* v)
{
    {
        std::string s;
        if(from_str_variant(v->get_child("upgrade_cost"), s)<0) return false;
        ClassStringReader cr;
        upgrade_cost = cr.GetObjectList<CostItem>();
    }
    {
        std::string s;
        if(from_str_variant(v->get_child("add_furniture"), s)<0) return false;
        ClassStringReader cr;
        add_furniture = cr.GetObjectList<ObjectLayout>();
    }
    if(from_str_variant(v->get_child("level"), level)<0) return false;
    if(from_str_variant(v->get_child("size"), size)<0) return false;

    return true;
}
bool Scene::LoadFromVariant(variant* v)
{
    {
        variant* v_list = v->get_child("SceneLevelList");
        if(v_list == NULL)
        {
            v_list = v;
        }
        int n = v_list->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_list->get_key(i), "SceneLevel"))
            {
                SceneLevel element;
                variant* v_element = v_list->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                SceneLevelList.emplace_back(element);
            }
        }
    }
    {
        std::string s;
        if(from_str_variant(v->get_child("def_layout"), s)<0) return false;
        ClassStringReader cr;
        def_layout = cr.GetObjectList<ObjectLayout>();
    }
    {
        std::string s;
        if(from_str_variant(v->get_child("open_cost"), s)<0) return false;
        ClassStringReader cr;
        open_cost = cr.GetObjectList<CostItem>();
    }
    if(from_str_variant(v->get_child("type"), type)<0) return false;
    if(from_str_variant(v->get_child("name"), name)<0) return false;
    if(from_str_variant(v->get_child("id"), id)<0) return false;
    if(from_str_variant(v->get_child("open_level"), open_level)<0) return false;
    if(from_str_variant(v->get_child("def_ground"), def_ground)<0) return false;
    if(from_str_variant(v->get_child("def_terrain"), def_terrain)<0) return false;
    if(from_str_variant(v->get_child("def_bg"), def_bg)<0) return false;

    return true;
}
bool HomeConfig::LoadFromVariant(variant* v)
{
    {
        variant* v_dict = v->get_child("SceneList");
        if(v_dict == NULL)
        {
            v_dict = v;
        }
        int n = v_dict->get_child_count();
        for(int i=0; i<n; i++)
        {
            if(!strcmp(v_dict->get_key(i), "Scene"))
            {
                Scene element;
                variant* v_element = v_dict->get_child(i);
                if(!element.LoadFromVariant(v_element))
                {
                    return false;
                }
                SceneList.emplace(element.id, element);
            }
        }
    }

    return true;
}

