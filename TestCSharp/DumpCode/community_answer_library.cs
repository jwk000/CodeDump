//this file is generated by xml2code tool 7/19/2018 17:04:32
//DO NOT EDIT IT !

using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{

    
    public class Answer :IXmlParser
    {
        public int id = 0; 
        public string content ; 
        public int result =0; 
        public List<string> choice_answer_list = new List<string>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("choice_answer_list");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node =  mid_node.ChildNodes;
                if(child_node != null)
                {
                    foreach(XmlNode n in child_node)
                    {
                        choice_answer_list.Add(n.InnerText);
                    }
                }
            }
            if(node.Attributes!=null && node.Attributes["content"]!=null)
            {
                content = node.Attributes["content"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("content");
                if(child!=null)
                {
                    content = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["id"]!=null)
            {
                id = int.Parse(node.Attributes["id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("id");
                if(child!=null)
                {
                    id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["result"]!=null)
            {
                result = int.Parse(node.Attributes["result"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("result");
                if(child!=null)
                {
                    result = int.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class AnswerLibrary :IXmlParser
    {
        public Dictionary<int,Answer> answers = new Dictionary<int,Answer>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("answers");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var nodes = mid_node.SelectNodes("Answer");
                if(nodes!=null)
                {
                    foreach(XmlNode n in nodes)
                    {
                        Answer value = new Answer();
                        if(!value.Parse(n))
                        {
                            return false;
                        }
                        answers.Add(value.id, value);
                    }
                }
            }

            return true;
        }
    }


    public class Testcommunity_answer_library : ITestCode
    {
        public void RunTestCode(string basepath)
        {
            string xml = basepath+"test/testxml/community_answer_library.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xml);
            XmlNode root = doc.LastChild;
            AnswerLibrary data = new AnswerLibrary();
            if(!data.Parse(root))
            {
                Console.WriteLine("解析{0}失败", xml);
                return;
            }

            //写入bytes文件
            byte[] b = GenericBuilder.GenericsEncode(data);
            FileStream fs = File.Create("community_answer_library.bytes");
            fs.Write(b, 0, b.Length);
            fs.Close();

            //dump内容
            AnswerLibrary d = GenericParser.GenericsDecode<AnswerLibrary>(b);
            string s = GenericDump.Dump(d);
            fs = File.Create("community_answer_library.txt");
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine(s);
            sw.Close();
            fs.Close();
        }
    }
}
