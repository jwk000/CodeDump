//this file is generated by xml2code tool 7/19/2018 17:04:32
//DO NOT EDIT IT !

using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{

    
    public class check :IXmlParser
    {
        public bool formal_is_check_env =false; 
        public bool check_is_check_env =false; 
        public bool is_show_wx_gift_center =false; 
        public bool is_block_func_in_gray_server =false; 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["formal_is_check_env"]!=null)
            {
                formal_is_check_env = bool.Parse(node.Attributes["formal_is_check_env"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("formal_is_check_env");
                if(child!=null)
                {
                    formal_is_check_env = bool.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["check_is_check_env"]!=null)
            {
                check_is_check_env = bool.Parse(node.Attributes["check_is_check_env"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("check_is_check_env");
                if(child!=null)
                {
                    check_is_check_env = bool.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["is_show_wx_gift_center"]!=null)
            {
                is_show_wx_gift_center = bool.Parse(node.Attributes["is_show_wx_gift_center"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("is_show_wx_gift_center");
                if(child!=null)
                {
                    is_show_wx_gift_center = bool.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["is_block_func_in_gray_server"]!=null)
            {
                is_block_func_in_gray_server = bool.Parse(node.Attributes["is_block_func_in_gray_server"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("is_block_func_in_gray_server");
                if(child!=null)
                {
                    is_block_func_in_gray_server = bool.Parse(child.InnerText);
                }
            }

            return true;
        }
    }


    public class Testcheck : ITestCode
    {
        public void RunTestCode(string basepath)
        {
            string xml = basepath+"test/testxml/check.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xml);
            XmlNode root = doc.LastChild;
            check data = new check();
            if(!data.Parse(root))
            {
                Console.WriteLine("解析{0}失败", xml);
                return;
            }

            //写入bytes文件
            byte[] b = GenericBuilder.GenericsEncode(data);
            FileStream fs = File.Create("check.bytes");
            fs.Write(b, 0, b.Length);
            fs.Close();

            //dump内容
            check d = GenericParser.GenericsDecode<check>(b);
            string s = GenericDump.Dump(d);
            fs = File.Create("check.txt");
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine(s);
            sw.Close();
            fs.Close();
        }
    }
}
