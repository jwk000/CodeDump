//this file is generated by xml2code tool 7/19/2018 17:04:32
//DO NOT EDIT IT !

using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{
    
    public enum HomeType
    {
        Home001 = 1, 
        Home222 = 2, 
        Home333 = 3, 
    }

    
    public class SceneLevel :IXmlParser
    {
        public int level =0; 
        public int size =0; 
        public List<CostItem> upgrade_cost = new List<CostItem>(); 
        public List<ObjectLayout> add_furniture = new List<ObjectLayout>(); 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["upgrade_cost"]!=null)
            {
                var s = node.Attributes["upgrade_cost"].Value;
                upgrade_cost = GenericStringParser.GetObjectList<CostItem>(s);
            }
            if(node.Attributes!=null && node.Attributes["add_furniture"]!=null)
            {
                var s = node.Attributes["add_furniture"].Value;
                add_furniture = GenericStringParser.GetObjectList<ObjectLayout>(s);
            }
            if(node.Attributes!=null && node.Attributes["level"]!=null)
            {
                level = int.Parse(node.Attributes["level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("level");
                if(child!=null)
                {
                    level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["size"]!=null)
            {
                size = int.Parse(node.Attributes["size"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("size");
                if(child!=null)
                {
                    size = int.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Scene :IXmlParser
    {
        public int id =0; //作为dict的key
        public HomeType type ; //枚举
        public string name ="my home"; 
        public int open_level =0; 
        public int def_ground = 0; 
        public int def_terrain = 0; 
        public int def_bg = 0; 
        public List<ObjectLayout> def_layout = new List<ObjectLayout>(); 
        public List<CostItem> open_cost = new List<CostItem>(); 
        public List<SceneLevel> SceneLevelList = new List<SceneLevel>(); //默认从下级节点解析

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("SceneLevelList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("SceneLevel");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    SceneLevel value = new SceneLevel();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    SceneLevelList.Add(value);
                }
            }
            if(node.Attributes!=null && node.Attributes["def_layout"]!=null)
            {
                var s = node.Attributes["def_layout"].Value;
                def_layout = GenericStringParser.GetObjectList<ObjectLayout>(s);
            }
            if(node.Attributes!=null && node.Attributes["open_cost"]!=null)
            {
                var s = node.Attributes["open_cost"].Value;
                open_cost = GenericStringParser.GetObjectList<CostItem>(s);
            }
            if(node.Attributes!=null && node.Attributes["name"]!=null)
            {
                name = node.Attributes["name"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("name");
                if(child!=null)
                {
                    name = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["type"]!=null)
            {
                type = (HomeType)int.Parse(node.Attributes["type"].Value);
            }
            if(node.Attributes!=null && node.Attributes["id"]!=null)
            {
                id = int.Parse(node.Attributes["id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("id");
                if(child!=null)
                {
                    id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["open_level"]!=null)
            {
                open_level = int.Parse(node.Attributes["open_level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("open_level");
                if(child!=null)
                {
                    open_level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["def_ground"]!=null)
            {
                def_ground = int.Parse(node.Attributes["def_ground"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("def_ground");
                if(child!=null)
                {
                    def_ground = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["def_terrain"]!=null)
            {
                def_terrain = int.Parse(node.Attributes["def_terrain"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("def_terrain");
                if(child!=null)
                {
                    def_terrain = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["def_bg"]!=null)
            {
                def_bg = int.Parse(node.Attributes["def_bg"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("def_bg");
                if(child!=null)
                {
                    def_bg = int.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class HomeConfig :IXmlParser
    {
        public Dictionary<int,Scene> SceneList = new Dictionary<int,Scene>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("SceneList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var nodes = mid_node.SelectNodes("Scene");
                if(nodes!=null)
                {
                    foreach(XmlNode n in nodes)
                    {
                        Scene value = new Scene();
                        if(!value.Parse(n))
                        {
                            return false;
                        }
                        SceneList.Add(value.id, value);
                    }
                }
            }

            return true;
        }
    }


    public class Testhome_config : ITestCode
    {
        public void RunTestCode(string basepath)
        {
            string xml = basepath+"test/testxml/home_config.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xml);
            XmlNode root = doc.LastChild;
            HomeConfig data = new HomeConfig();
            if(!data.Parse(root))
            {
                Console.WriteLine("解析{0}失败", xml);
                return;
            }

            //写入bytes文件
            byte[] b = GenericBuilder.GenericsEncode(data);
            FileStream fs = File.Create("home_config.bytes");
            fs.Write(b, 0, b.Length);
            fs.Close();

            //dump内容
            HomeConfig d = GenericParser.GenericsDecode<HomeConfig>(b);
            string s = GenericDump.Dump(d);
            fs = File.Create("home_config.txt");
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine(s);
            sw.Close();
            fs.Close();
        }
    }
}
