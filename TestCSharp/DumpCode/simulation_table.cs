//this file is generated by xml2code tool 7/19/2018 17:04:32
//DO NOT EDIT IT !

using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using GYGeneric;

namespace GYXMLData
{

    
    public class Upgrade :IXmlParser
    {
        public int level = 0; 
        public int player_level = 0; 
        public List<CostItem> cost = new List<CostItem>(); 
        public int pos_count = 0; 
        public int out_interval = 0; 
        public float out_level_rate = 0.0f; 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["cost"]!=null)
            {
                var s = node.Attributes["cost"].Value;
                cost = GenericStringParser.GetObjectList<CostItem>(s);
            }
            if(node.Attributes!=null && node.Attributes["level"]!=null)
            {
                level = int.Parse(node.Attributes["level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("level");
                if(child!=null)
                {
                    level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["player_level"]!=null)
            {
                player_level = int.Parse(node.Attributes["player_level"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("player_level");
                if(child!=null)
                {
                    player_level = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["pos_count"]!=null)
            {
                pos_count = int.Parse(node.Attributes["pos_count"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("pos_count");
                if(child!=null)
                {
                    pos_count = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_interval"]!=null)
            {
                out_interval = int.Parse(node.Attributes["out_interval"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_interval");
                if(child!=null)
                {
                    out_interval = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_level_rate"]!=null)
            {
                out_level_rate = float.Parse(node.Attributes["out_level_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_level_rate");
                if(child!=null)
                {
                    out_level_rate = float.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Furniture :IXmlParser
    {
        public int furniture_id = 0; 
        public bool is_double = false; 
        public List<Upgrade> LevelList = new List<Upgrade>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("LevelList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("Upgrade");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    Upgrade value = new Upgrade();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    LevelList.Add(value);
                }
            }
            if(node.Attributes!=null && node.Attributes["furniture_id"]!=null)
            {
                furniture_id = int.Parse(node.Attributes["furniture_id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("furniture_id");
                if(child!=null)
                {
                    furniture_id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["is_double"]!=null)
            {
                is_double = bool.Parse(node.Attributes["is_double"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("is_double");
                if(child!=null)
                {
                    is_double = bool.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Action :IXmlParser
    {
        public int id = 0; 
        public string name ; 
        public Reward outreward = new Reward(); 
        public string anim_id ; 
        public float out_action_rate = 0.0f; 
        public List<Furniture> FurnitureList = new List<Furniture>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("FurnitureList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var child_node = mid_node.SelectNodes("Furniture");
                if(child_node == null)
                {
                    child_node = mid_node.ChildNodes;
                }
                foreach(XmlNode n in child_node)
                {
                    Furniture value = new Furniture();
                    if(!value.Parse(n))
                    {
                        return false;
                    }
                    FurnitureList.Add(value);
                }
            }
            if(node.Attributes!=null && node.Attributes["outreward"]!=null)
            {
                var s = node.Attributes["outreward"].Value;
                outreward = GenericStringParser.GetObject<Reward>(s);
            }
            if(node.Attributes!=null && node.Attributes["name"]!=null)
            {
                name = node.Attributes["name"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("name");
                if(child!=null)
                {
                    name = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["anim_id"]!=null)
            {
                anim_id = node.Attributes["anim_id"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("anim_id");
                if(child!=null)
                {
                    anim_id = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["id"]!=null)
            {
                id = int.Parse(node.Attributes["id"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("id");
                if(child!=null)
                {
                    id = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["out_action_rate"]!=null)
            {
                out_action_rate = float.Parse(node.Attributes["out_action_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_action_rate");
                if(child!=null)
                {
                    out_action_rate = float.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class ReduceMap :IXmlParser
    {
        public int key = 0; 
        public float value = 0.0f; 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["key"]!=null)
            {
                key = int.Parse(node.Attributes["key"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("key");
                if(child!=null)
                {
                    key = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["value"]!=null)
            {
                value = float.Parse(node.Attributes["value"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("value");
                if(child!=null)
                {
                    value = float.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Const :IXmlParser
    {
        public int out_heart_time = 0; 
        public int storage_max_count = 0; 
        public int recover_health_time = 0; 
        public int health_out_rate = 0; 
        public int normal_out_rate = 0; 
        public int tired_out_rate = 0; 
        public int recover_heart_time = 0; 
        public int min_work_time = 0; 
        public int max_work_time = 0; 
        public int health_phase_rate = 0; 
        public int normal_phase_rate = 0; 
        public int tired_phase_rate = 0; 
        public string health_phase_img ; 
        public string normal_phase_img ; 
        public string tired_phase_img ; 
        public List<ReduceMap> recover_time_reduce_map = new List<ReduceMap>(); 

        public bool Parse(XmlNode node)
        {
            if(node.Attributes!=null && node.Attributes["recover_time_reduce_map"]!=null)
            {
                var s = node.Attributes["recover_time_reduce_map"].Value;
                recover_time_reduce_map = GenericStringParser.GetObjectList<ReduceMap>(s);
            }
            if(node.Attributes!=null && node.Attributes["health_phase_img"]!=null)
            {
                health_phase_img = node.Attributes["health_phase_img"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("health_phase_img");
                if(child!=null)
                {
                    health_phase_img = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["normal_phase_img"]!=null)
            {
                normal_phase_img = node.Attributes["normal_phase_img"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("normal_phase_img");
                if(child!=null)
                {
                    normal_phase_img = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["tired_phase_img"]!=null)
            {
                tired_phase_img = node.Attributes["tired_phase_img"].Value;
            }
            else
            {
                var child = node.SelectSingleNode("tired_phase_img");
                if(child!=null)
                {
                    tired_phase_img = child.InnerText;
                }
            }
            if(node.Attributes!=null && node.Attributes["out_heart_time"]!=null)
            {
                out_heart_time = int.Parse(node.Attributes["out_heart_time"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("out_heart_time");
                if(child!=null)
                {
                    out_heart_time = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["storage_max_count"]!=null)
            {
                storage_max_count = int.Parse(node.Attributes["storage_max_count"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("storage_max_count");
                if(child!=null)
                {
                    storage_max_count = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["recover_health_time"]!=null)
            {
                recover_health_time = int.Parse(node.Attributes["recover_health_time"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("recover_health_time");
                if(child!=null)
                {
                    recover_health_time = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["health_out_rate"]!=null)
            {
                health_out_rate = int.Parse(node.Attributes["health_out_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("health_out_rate");
                if(child!=null)
                {
                    health_out_rate = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["normal_out_rate"]!=null)
            {
                normal_out_rate = int.Parse(node.Attributes["normal_out_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("normal_out_rate");
                if(child!=null)
                {
                    normal_out_rate = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["tired_out_rate"]!=null)
            {
                tired_out_rate = int.Parse(node.Attributes["tired_out_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("tired_out_rate");
                if(child!=null)
                {
                    tired_out_rate = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["recover_heart_time"]!=null)
            {
                recover_heart_time = int.Parse(node.Attributes["recover_heart_time"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("recover_heart_time");
                if(child!=null)
                {
                    recover_heart_time = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["min_work_time"]!=null)
            {
                min_work_time = int.Parse(node.Attributes["min_work_time"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("min_work_time");
                if(child!=null)
                {
                    min_work_time = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["max_work_time"]!=null)
            {
                max_work_time = int.Parse(node.Attributes["max_work_time"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("max_work_time");
                if(child!=null)
                {
                    max_work_time = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["health_phase_rate"]!=null)
            {
                health_phase_rate = int.Parse(node.Attributes["health_phase_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("health_phase_rate");
                if(child!=null)
                {
                    health_phase_rate = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["normal_phase_rate"]!=null)
            {
                normal_phase_rate = int.Parse(node.Attributes["normal_phase_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("normal_phase_rate");
                if(child!=null)
                {
                    normal_phase_rate = int.Parse(child.InnerText);
                }
            }
            if(node.Attributes!=null && node.Attributes["tired_phase_rate"]!=null)
            {
                tired_phase_rate = int.Parse(node.Attributes["tired_phase_rate"].Value);
            }
            else
            {
                var child = node.SelectSingleNode("tired_phase_rate");
                if(child!=null)
                {
                    tired_phase_rate = int.Parse(child.InnerText);
                }
            }

            return true;
        }
    }

    
    public class Simulation :IXmlParser
    {
        public Const const_var = new Const(); 
        public Dictionary<int,Action> ActionList = new Dictionary<int,Action>(); 

        public bool Parse(XmlNode node)
        {
            {
                var mid_node = node.SelectSingleNode("ActionList");
                if(mid_node==null)
                {
                    mid_node = node;
                }
                var nodes = mid_node.SelectNodes("Action");
                if(nodes!=null)
                {
                    foreach(XmlNode n in nodes)
                    {
                        Action value = new Action();
                        if(!value.Parse(n))
                        {
                            return false;
                        }
                        ActionList.Add(value.id, value);
                    }
                }
            }
            {
                var child_node = node.SelectSingleNode("Const");
                if(child_node != null)
                {
                    if(!const_var.Parse(child_node))
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }


    public class Testsimulation_table : ITestCode
    {
        public void RunTestCode(string basepath)
        {
            string xml = basepath+"test/testxml/simulation_table.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xml);
            XmlNode root = doc.LastChild;
            Simulation data = new Simulation();
            if(!data.Parse(root))
            {
                Console.WriteLine("解析{0}失败", xml);
                return;
            }

            //写入bytes文件
            byte[] b = GenericBuilder.GenericsEncode(data);
            FileStream fs = File.Create("simulation_table.bytes");
            fs.Write(b, 0, b.Length);
            fs.Close();

            //dump内容
            Simulation d = GenericParser.GenericsDecode<Simulation>(b);
            string s = GenericDump.Dump(d);
            fs = File.Create("simulation_table.txt");
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine(s);
            sw.Close();
            fs.Close();
        }
    }
}
